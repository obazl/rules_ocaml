## this rule compiles the ns resolver file produced
## by rule ocaml_ns

load("//build/_lib:apis.bzl", "options", "options_module", "options_ppx")

load("//build:providers.bzl",
     "OCamlModuleProvider",
     "OCamlNsResolverProvider",
     "OcamlNsSubmoduleMarker")
     # "OcamlProvider")

load("@rules_ocaml//build:providers.bzl", "OCamlDepsProvider")

# load("//ocaml/_rules:impl_module.bzl", "impl_module")

load("//build/_rules/ocaml_ns:impl_ns_module.bzl",
     "impl_ns_module")

##############################################
def _ns_config_out_transition_impl(settings, attr):
    return {
        "@rules_ocaml//toolchain": "ocamlopt",
        "//command_line_option:host_platform": "@rules_ocaml//platform:ocamlopt.opt",
        "//command_line_option:platforms": "@rules_ocaml//platform:ocamlopt.opt",
        "@rules_ocaml//cfg/library/linkage:linkage": "static",
        "@rules_ocaml//cfg/library/linkage:level": 0,
    }

_ns_config_out_transition = transition(
    implementation = _ns_config_out_transition_impl,
    inputs = [ ],
    outputs = [
        "@rules_ocaml//toolchain",
        "//command_line_option:host_platform",
        "//command_line_option:platforms",
        "@rules_ocaml//cfg/library/linkage:linkage",
        "@rules_ocaml//cfg/library/linkage:level"
    ]
)

###############################
def _ocaml_ns_module(ctx):

    # return impl_module(ctx)

    return impl_ns_module(ctx)

###############################
rule_options = options("rules_ocaml")
# rule_options.update(options_module("ocaml"))
# rule_options.update(options_ppx)

# rule_options.update(options_ns_module("ocaml"))

#########################
ocaml_ns_module = rule(
  implementation = _ocaml_ns_module,
    doc = """
Compiles the ns-resolver module generated by link:ocaml_ns_config[ocaml_ns_config].

    """,
    attrs = dict(
        rule_options,

        ns_config = attr.label(
            doc = "Label of one link:ocaml_ns_config[ocaml_ns_config] target.",
            mandatory = True,
            providers = [
                [OCamlNsResolverProvider]
            ],
            allow_single_file = True,
            cfg = _ns_config_out_transition
        ),
        _allowlist_function_transition = attr.label(
            default = "@bazel_tools//tools/allowlists/function_transition_allowlist"
        ),

        _warnings  = attr.label(default = "@rules_ocaml//cfg/ns:warnings"),
        _tags = attr.string_list( default  = ["ocaml"] ),

        _rule = attr.string(default = "ocaml_ns_resolver")
    ),
    provides = [OCamlNsResolverProvider,OCamlDepsProvider],
    executable = False,
    toolchains = [
        "@rules_ocaml//toolchain/type:std",
        "@rules_ocaml//toolchain/type:profile",
    ],
)
